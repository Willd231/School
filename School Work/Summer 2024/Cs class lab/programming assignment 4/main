#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAXLEN 19

// Structs for customer and treenode
typedef struct customer {
    char name[MAXLEN + 1];
    int points;
} customer;

typedef struct treenode {
    customer* cPtr;
    int size;
    struct treenode* left;
    struct treenode* right;
} treenode;

// Function prototypes
treenode* insertNode(treenode* root, customer* newCustomer);
treenode* deleteNode(treenode* root, const char* name);
treenode* findMin(treenode* node);
void searchNode(treenode* root, const char* name);
int countSmaller(treenode* root, const char* name);
void printSortedCustomers(treenode* root);
void freeTree(treenode* root);

int compareCustomers(const void* a, const void* b);

int main() {
    int n;
    scanf("%d", &n);
    getchar(); // Consume newline character

    treenode* root = NULL;

    for (int i = 0; i < n; i++) {
        char command[15], name[MAXLEN + 1];
        int points;
        scanf("%s", command);

        if (strcmp(command, "add") == 0) {
            scanf("%s %d", name, &points);
            customer* newCustomer = (customer*)malloc(sizeof(customer));
            strcpy(newCustomer->name, name);
            newCustomer->points = points;
            root = insertNode(root, newCustomer);
            printf("%s %d\n", name, points);
        } else if (strcmp(command, "sub") == 0) {
            scanf("%s %d", name, &points);
            // Implement code to subtract loyalty points from customer
        } else if (strcmp(command, "del") == 0) {
            scanf("%s", name);
            // Implement code to delete customer
        } else if (strcmp(command, "search") == 0) {
            scanf("%s", name);
            // Implement code to search for customer
        } else if (strcmp(command, "count_smaller") == 0) {
            scanf("%s", name);
            // Implement code to count customers smaller than given name
        }
    }

    // Print sorted customers
    printSortedCustomers(root);

    // Free allocated memory
    freeTree(root);

    return 0;
}

// Implement the binary search tree operations and sorting algorithm here

